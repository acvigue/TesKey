// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: errors.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
// Adapted from https://github.com/teslamotors/vehicle-command

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum GenericError_E: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case genericerrorNone // = 0
  case genericerrorUnknown // = 1
  case genericerrorClosuresOpen // = 2
  case genericerrorAlreadyOn // = 3
  case genericerrorDisabledForUserCommand // = 4
  case genericerrorVehicleNotInPark // = 5
  case genericerrorUnauthorized // = 6
  case genericerrorNotAllowedOverTransport // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .genericerrorNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .genericerrorNone
    case 1: self = .genericerrorUnknown
    case 2: self = .genericerrorClosuresOpen
    case 3: self = .genericerrorAlreadyOn
    case 4: self = .genericerrorDisabledForUserCommand
    case 5: self = .genericerrorVehicleNotInPark
    case 6: self = .genericerrorUnauthorized
    case 7: self = .genericerrorNotAllowedOverTransport
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .genericerrorNone: return 0
    case .genericerrorUnknown: return 1
    case .genericerrorClosuresOpen: return 2
    case .genericerrorAlreadyOn: return 3
    case .genericerrorDisabledForUserCommand: return 4
    case .genericerrorVehicleNotInPark: return 5
    case .genericerrorUnauthorized: return 6
    case .genericerrorNotAllowedOverTransport: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GenericError_E: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [GenericError_E] = [
    .genericerrorNone,
    .genericerrorUnknown,
    .genericerrorClosuresOpen,
    .genericerrorAlreadyOn,
    .genericerrorDisabledForUserCommand,
    .genericerrorVehicleNotInPark,
    .genericerrorUnauthorized,
    .genericerrorNotAllowedOverTransport,
  ]
}

#endif  // swift(>=4.2)

struct NominalError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var genericError: GenericError_E = .genericerrorNone

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GenericError_E: @unchecked Sendable {}
extension NominalError: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GenericError_E: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERICERROR_NONE"),
    1: .same(proto: "GENERICERROR_UNKNOWN"),
    2: .same(proto: "GENERICERROR_CLOSURES_OPEN"),
    3: .same(proto: "GENERICERROR_ALREADY_ON"),
    4: .same(proto: "GENERICERROR_DISABLED_FOR_USER_COMMAND"),
    5: .same(proto: "GENERICERROR_VEHICLE_NOT_IN_PARK"),
    6: .same(proto: "GENERICERROR_UNAUTHORIZED"),
    7: .same(proto: "GENERICERROR_NOT_ALLOWED_OVER_TRANSPORT"),
  ]
}

extension NominalError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NominalError"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "genericError"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.genericError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.genericError != .genericerrorNone {
      try visitor.visitSingularEnumField(value: self.genericError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NominalError, rhs: NominalError) -> Bool {
    if lhs.genericError != rhs.genericError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
