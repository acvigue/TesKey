// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: keys.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
// Adapted from https://github.com/teslamotors/vehicle-command

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Role: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case service // = 1
  case owner // = 2
  case driver // = 3
  case fm // = 4
  case vehicleMonitor // = 5
  case chargingManager // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .service
    case 2: self = .owner
    case 3: self = .driver
    case 4: self = .fm
    case 5: self = .vehicleMonitor
    case 6: self = .chargingManager
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .service: return 1
    case .owner: return 2
    case .driver: return 3
    case .fm: return 4
    case .vehicleMonitor: return 5
    case .chargingManager: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Role] = [
    .none,
    .service,
    .owner,
    .driver,
    .fm,
    .vehicleMonitor,
    .chargingManager,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Role: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLE_NONE"),
    1: .same(proto: "ROLE_SERVICE"),
    2: .same(proto: "ROLE_OWNER"),
    3: .same(proto: "ROLE_DRIVER"),
    4: .same(proto: "ROLE_FM"),
    5: .same(proto: "ROLE_VEHICLE_MONITOR"),
    6: .same(proto: "ROLE_CHARGING_MANAGER"),
  ]
}
