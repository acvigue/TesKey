// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vehicle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
// Adapted from https://github.com/teslamotors/vehicle-command

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ClimateState_CopActivationTemp: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case copActivationTempUnspecified // = 0
  case copActivationTempLow // = 1
  case copActivationTempMedium // = 2
  case copActivationTempHigh // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .copActivationTempUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .copActivationTempUnspecified
    case 1: self = .copActivationTempLow
    case 2: self = .copActivationTempMedium
    case 3: self = .copActivationTempHigh
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .copActivationTempUnspecified: return 0
    case .copActivationTempLow: return 1
    case .copActivationTempMedium: return 2
    case .copActivationTempHigh: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ClimateState_CopActivationTemp: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ClimateState_CopActivationTemp] = [
    .copActivationTempUnspecified,
    .copActivationTempLow,
    .copActivationTempMedium,
    .copActivationTempHigh,
  ]
}

#endif  // swift(>=4.2)

struct ClimateState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct VehicleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var guestMode: VehicleState_GuestMode {
    get {return _guestMode ?? VehicleState_GuestMode()}
    set {_guestMode = newValue}
  }
  /// Returns true if `guestMode` has been explicitly set.
  var hasGuestMode: Bool {return self._guestMode != nil}
  /// Clears the value of `guestMode`. Subsequent reads from it will return its default value.
  mutating func clearGuestMode() {self._guestMode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _guestMode: VehicleState_GuestMode? = nil
}

struct VehicleState_GuestMode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var guestModeActive: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ClimateState_CopActivationTemp: @unchecked Sendable {}
extension ClimateState: @unchecked Sendable {}
extension VehicleState: @unchecked Sendable {}
extension VehicleState_GuestMode: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ClimateState_CopActivationTemp: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CopActivationTempUnspecified"),
    1: .same(proto: "CopActivationTempLow"),
    2: .same(proto: "CopActivationTempMedium"),
    3: .same(proto: "CopActivationTempHigh"),
  ]
}

extension ClimateState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClimateState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ClimateState, rhs: ClimateState) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension VehicleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "VehicleState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    74: .same(proto: "guestMode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 74: try { try decoder.decodeSingularMessageField(value: &self._guestMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._guestMode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 74)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: VehicleState, rhs: VehicleState) -> Bool {
    if lhs._guestMode != rhs._guestMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension VehicleState_GuestMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "VehicleState_GuestMode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "GuestModeActive"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.guestModeActive) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.guestModeActive != false {
      try visitor.visitSingularBoolField(value: self.guestModeActive, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: VehicleState_GuestMode, rhs: VehicleState_GuestMode) -> Bool {
    if lhs.guestModeActive != rhs.guestModeActive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
